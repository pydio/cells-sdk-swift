//
// RestActionParameters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestActionParameters: Codable, JSONEncodable, Hashable {

    public var awaitStatus: JobsTaskStatus?
    public var awaitTimeout: String?
    public var jsonParameters: String?
    public var nodes: [RestNodeLocator]?
    public var selectionUuid: String?
    public var targetNode: RestNodeLocator?

    public init(awaitStatus: JobsTaskStatus? = nil, awaitTimeout: String? = nil, jsonParameters: String? = nil, nodes: [RestNodeLocator]? = nil, selectionUuid: String? = nil, targetNode: RestNodeLocator? = nil) {
        self.awaitStatus = awaitStatus
        self.awaitTimeout = awaitTimeout
        self.jsonParameters = jsonParameters
        self.nodes = nodes
        self.selectionUuid = selectionUuid
        self.targetNode = targetNode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case awaitStatus = "AwaitStatus"
        case awaitTimeout = "AwaitTimeout"
        case jsonParameters = "JsonParameters"
        case nodes = "Nodes"
        case selectionUuid = "SelectionUuid"
        case targetNode = "TargetNode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(awaitStatus, forKey: .awaitStatus)
        try container.encodeIfPresent(awaitTimeout, forKey: .awaitTimeout)
        try container.encodeIfPresent(jsonParameters, forKey: .jsonParameters)
        try container.encodeIfPresent(nodes, forKey: .nodes)
        try container.encodeIfPresent(selectionUuid, forKey: .selectionUuid)
        try container.encodeIfPresent(targetNode, forKey: .targetNode)
    }

    public static func == (lhs: RestActionParameters, rhs: RestActionParameters) -> Bool {
        lhs.awaitStatus == rhs.awaitStatus &&
        lhs.awaitTimeout == rhs.awaitTimeout &&
        lhs.jsonParameters == rhs.jsonParameters &&
        lhs.nodes == rhs.nodes &&
        lhs.selectionUuid == rhs.selectionUuid &&
        lhs.targetNode == rhs.targetNode
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(awaitStatus?.hashValue)
        hasher.combine(awaitTimeout?.hashValue)
        hasher.combine(jsonParameters?.hashValue)
        hasher.combine(nodes?.hashValue)
        hasher.combine(selectionUuid?.hashValue)
        hasher.combine(targetNode?.hashValue)
        
    }
}

