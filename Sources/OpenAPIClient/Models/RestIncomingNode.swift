//
// RestIncomingNode.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestIncomingNode: Codable, JSONEncodable, Hashable {

    public var contentType: String?
    public var locator: RestNodeLocator
    public var templateUuid: String?
    public var type: TreeNodeType

    public init(contentType: String? = nil, locator: RestNodeLocator, templateUuid: String? = nil, type: TreeNodeType) {
        self.contentType = contentType
        self.locator = locator
        self.templateUuid = templateUuid
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentType = "ContentType"
        case locator = "Locator"
        case templateUuid = "TemplateUuid"
        case type = "Type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encode(locator, forKey: .locator)
        try container.encodeIfPresent(templateUuid, forKey: .templateUuid)
        try container.encode(type, forKey: .type)
    }

    public static func == (lhs: RestIncomingNode, rhs: RestIncomingNode) -> Bool {
        lhs.contentType == rhs.contentType &&
        lhs.locator == rhs.locator &&
        lhs.templateUuid == rhs.templateUuid &&
        lhs.type == rhs.type
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contentType?.hashValue)
        hasher.combine(locator.hashValue)
        hasher.combine(templateUuid?.hashValue)
        hasher.combine(type.hashValue)
        
    }
}

