//
// RestShareLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestShareLink: Codable, JSONEncodable, Hashable {

    public var accessEnd: String?
    public var accessStart: String?
    public var currentDownloads: String?
    public var description: String?
    public var label: String?
    public var linkHash: String?
    public var linkUrl: String?
    public var maxDownloads: String?
    public var passwordRequired: Bool?
    public var permissions: [RestShareLinkAccessType]?
    public var policies: [ServiceResourcePolicy]?
    public var policiesContextEditable: Bool?
    public var restrictToTargetUsers: Bool?
    public var rootNodes: [TreeNode]?
    public var targetUsers: [String: RestShareLinkTargetUser]?
    public var userLogin: String?
    public var userUuid: String?
    public var uuid: String?
    public var viewTemplateName: String?

    public init(accessEnd: String? = nil, accessStart: String? = nil, currentDownloads: String? = nil, description: String? = nil, label: String? = nil, linkHash: String? = nil, linkUrl: String? = nil, maxDownloads: String? = nil, passwordRequired: Bool? = nil, permissions: [RestShareLinkAccessType]? = nil, policies: [ServiceResourcePolicy]? = nil, policiesContextEditable: Bool? = nil, restrictToTargetUsers: Bool? = nil, rootNodes: [TreeNode]? = nil, targetUsers: [String: RestShareLinkTargetUser]? = nil, userLogin: String? = nil, userUuid: String? = nil, uuid: String? = nil, viewTemplateName: String? = nil) {
        self.accessEnd = accessEnd
        self.accessStart = accessStart
        self.currentDownloads = currentDownloads
        self.description = description
        self.label = label
        self.linkHash = linkHash
        self.linkUrl = linkUrl
        self.maxDownloads = maxDownloads
        self.passwordRequired = passwordRequired
        self.permissions = permissions
        self.policies = policies
        self.policiesContextEditable = policiesContextEditable
        self.restrictToTargetUsers = restrictToTargetUsers
        self.rootNodes = rootNodes
        self.targetUsers = targetUsers
        self.userLogin = userLogin
        self.userUuid = userUuid
        self.uuid = uuid
        self.viewTemplateName = viewTemplateName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessEnd = "AccessEnd"
        case accessStart = "AccessStart"
        case currentDownloads = "CurrentDownloads"
        case description = "Description"
        case label = "Label"
        case linkHash = "LinkHash"
        case linkUrl = "LinkUrl"
        case maxDownloads = "MaxDownloads"
        case passwordRequired = "PasswordRequired"
        case permissions = "Permissions"
        case policies = "Policies"
        case policiesContextEditable = "PoliciesContextEditable"
        case restrictToTargetUsers = "RestrictToTargetUsers"
        case rootNodes = "RootNodes"
        case targetUsers = "TargetUsers"
        case userLogin = "UserLogin"
        case userUuid = "UserUuid"
        case uuid = "Uuid"
        case viewTemplateName = "ViewTemplateName"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessEnd, forKey: .accessEnd)
        try container.encodeIfPresent(accessStart, forKey: .accessStart)
        try container.encodeIfPresent(currentDownloads, forKey: .currentDownloads)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(linkHash, forKey: .linkHash)
        try container.encodeIfPresent(linkUrl, forKey: .linkUrl)
        try container.encodeIfPresent(maxDownloads, forKey: .maxDownloads)
        try container.encodeIfPresent(passwordRequired, forKey: .passwordRequired)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(policies, forKey: .policies)
        try container.encodeIfPresent(policiesContextEditable, forKey: .policiesContextEditable)
        try container.encodeIfPresent(restrictToTargetUsers, forKey: .restrictToTargetUsers)
        try container.encodeIfPresent(rootNodes, forKey: .rootNodes)
        try container.encodeIfPresent(targetUsers, forKey: .targetUsers)
        try container.encodeIfPresent(userLogin, forKey: .userLogin)
        try container.encodeIfPresent(userUuid, forKey: .userUuid)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(viewTemplateName, forKey: .viewTemplateName)
    }

    public static func == (lhs: RestShareLink, rhs: RestShareLink) -> Bool {
        lhs.accessEnd == rhs.accessEnd &&
        lhs.accessStart == rhs.accessStart &&
        lhs.currentDownloads == rhs.currentDownloads &&
        lhs.description == rhs.description &&
        lhs.label == rhs.label &&
        lhs.linkHash == rhs.linkHash &&
        lhs.linkUrl == rhs.linkUrl &&
        lhs.maxDownloads == rhs.maxDownloads &&
        lhs.passwordRequired == rhs.passwordRequired &&
        lhs.permissions == rhs.permissions &&
        lhs.policies == rhs.policies &&
        lhs.policiesContextEditable == rhs.policiesContextEditable &&
        lhs.restrictToTargetUsers == rhs.restrictToTargetUsers &&
        lhs.rootNodes == rhs.rootNodes &&
        lhs.targetUsers == rhs.targetUsers &&
        lhs.userLogin == rhs.userLogin &&
        lhs.userUuid == rhs.userUuid &&
        lhs.uuid == rhs.uuid &&
        lhs.viewTemplateName == rhs.viewTemplateName
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessEnd?.hashValue)
        hasher.combine(accessStart?.hashValue)
        hasher.combine(currentDownloads?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(linkHash?.hashValue)
        hasher.combine(linkUrl?.hashValue)
        hasher.combine(maxDownloads?.hashValue)
        hasher.combine(passwordRequired?.hashValue)
        hasher.combine(permissions?.hashValue)
        hasher.combine(policies?.hashValue)
        hasher.combine(policiesContextEditable?.hashValue)
        hasher.combine(restrictToTargetUsers?.hashValue)
        hasher.combine(rootNodes?.hashValue)
        hasher.combine(targetUsers?.hashValue)
        hasher.combine(userLogin?.hashValue)
        hasher.combine(userUuid?.hashValue)
        hasher.combine(uuid?.hashValue)
        hasher.combine(viewTemplateName?.hashValue)
        
    }
}

