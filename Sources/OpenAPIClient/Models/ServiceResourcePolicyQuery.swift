//
// ServiceResourcePolicyQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class ServiceResourcePolicyQuery: Codable, JSONEncodable, Hashable {

    public var action: ServiceResourcePolicyAction?
    public var any: Bool?
    public var empty: Bool?
    public var leftIdentifier: String?
    public var subjects: [String]?

    public init(action: ServiceResourcePolicyAction? = nil, any: Bool? = nil, empty: Bool? = nil, leftIdentifier: String? = nil, subjects: [String]? = nil) {
        self.action = action
        self.any = any
        self.empty = empty
        self.leftIdentifier = leftIdentifier
        self.subjects = subjects
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case action = "Action"
        case any = "Any"
        case empty = "Empty"
        case leftIdentifier = "LeftIdentifier"
        case subjects = "Subjects"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(any, forKey: .any)
        try container.encodeIfPresent(empty, forKey: .empty)
        try container.encodeIfPresent(leftIdentifier, forKey: .leftIdentifier)
        try container.encodeIfPresent(subjects, forKey: .subjects)
    }

    public static func == (lhs: ServiceResourcePolicyQuery, rhs: ServiceResourcePolicyQuery) -> Bool {
        lhs.action == rhs.action &&
        lhs.any == rhs.any &&
        lhs.empty == rhs.empty &&
        lhs.leftIdentifier == rhs.leftIdentifier &&
        lhs.subjects == rhs.subjects
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(action?.hashValue)
        hasher.combine(any?.hashValue)
        hasher.combine(empty?.hashValue)
        hasher.combine(leftIdentifier?.hashValue)
        hasher.combine(subjects?.hashValue)
        
    }
}

