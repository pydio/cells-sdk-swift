//
// NodeServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class NodeServiceAPI {

    /**
     * enum for parameter name
     */
    public enum Name_backgroundActionInfo: String, Sendable, CaseIterable {
        case delete = "delete"
        case restore = "restore"
        case copy = "copy"
        case move = "move"
        case extract = "extract"
        case compress = "compress"
    }

    /**
     Retrieve information about an action running in background
     
     - parameter name: (path)  
     - parameter jobUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestBackgroundAction
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func backgroundActionInfo(name: Name_backgroundActionInfo, jobUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestBackgroundAction {
        return try await backgroundActionInfoWithRequestBuilder(name: name, jobUuid: jobUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve information about an action running in background
     - GET /n/action/{Name}/{JobUuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter name: (path)  
     - parameter jobUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestBackgroundAction> 
     */
    open class func backgroundActionInfoWithRequestBuilder(name: Name_backgroundActionInfo, jobUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestBackgroundAction> {
        var localVariablePath = "/n/action/{Name}/{JobUuid}"
        let namePreEscape = "\(name.rawValue)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let jobUuidPreEscape = "\(APIHelper.mapValueToPathItem(jobUuid))"
        let jobUuidPostEscape = jobUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{JobUuid}", with: jobUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestBackgroundAction>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestBatchUpdateMetaList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchUpdateMeta(body: RestBatchUpdateMetaList, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestBatchUpdateMetaList {
        return try await batchUpdateMetaWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
     - PATCH /n/meta/batch
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestBatchUpdateMetaList> 
     */
    open class func batchUpdateMetaWithRequestBuilder(body: RestBatchUpdateMetaList, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestBatchUpdateMetaList> {
        let localVariablePath = "/n/meta/batch"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestBatchUpdateMetaList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter name
     */
    public enum Name_controlBackgroundAction: String, Sendable, CaseIterable {
        case delete = "delete"
        case restore = "restore"
        case copy = "copy"
        case move = "move"
        case extract = "extract"
        case compress = "compress"
    }

    /**
     Send control commands to a background job
     
     - parameter name: (path)  
     - parameter jobUuid: (path)  
     - parameter command: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestBackgroundAction
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func controlBackgroundAction(name: Name_controlBackgroundAction, jobUuid: String, command: JobsCtrlCommand, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestBackgroundAction {
        return try await controlBackgroundActionWithRequestBuilder(name: name, jobUuid: jobUuid, command: command, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Send control commands to a background job
     - PATCH /n/action/{Name}/{JobUuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter name: (path)  
     - parameter jobUuid: (path)  
     - parameter command: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestBackgroundAction> 
     */
    open class func controlBackgroundActionWithRequestBuilder(name: Name_controlBackgroundAction, jobUuid: String, command: JobsCtrlCommand, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestBackgroundAction> {
        var localVariablePath = "/n/action/{Name}/{JobUuid}"
        let namePreEscape = "\(name.rawValue)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let jobUuidPreEscape = "\(APIHelper.mapValueToPathItem(jobUuid))"
        let jobUuidPostEscape = jobUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{JobUuid}", with: jobUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: command, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestBackgroundAction>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create one or many files (empty or hydrated from a TemplateUuid) or folders
     
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNodeCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func create(body: RestCreateRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNodeCollection {
        return try await createWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create one or many files (empty or hydrated from a TemplateUuid) or folders
     - POST /n/nodes/create
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNodeCollection> 
     */
    open class func createWithRequestBuilder(body: RestCreateRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNodeCollection> {
        let localVariablePath = "/n/nodes/create"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNodeCollection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create a public link on a given node
     
     - parameter uuid: (path)  
     - parameter publicLinkRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestShareLink
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createPublicLink(uuid: String, publicLinkRequest: RestPublicLinkRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestShareLink {
        return try await createPublicLinkWithRequestBuilder(uuid: uuid, publicLinkRequest: publicLinkRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create a public link on a given node
     - POST /n/node/{Uuid}/link
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter uuid: (path)  
     - parameter publicLinkRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestShareLink> 
     */
    open class func createPublicLinkWithRequestBuilder(uuid: String, publicLinkRequest: RestPublicLinkRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestShareLink> {
        var localVariablePath = "/n/node/{Uuid}/link"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: publicLinkRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestShareLink>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Create and persist a temporary selection of nodes, that can be used by other actions
     
     - parameter body: (body) Request to create a selection from a list of nodes. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestSelection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createSelection(body: RestSelection, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestSelection {
        return try await createSelectionWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create and persist a temporary selection of nodes, that can be used by other actions
     - POST /n/selection
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter body: (body) Request to create a selection from a list of nodes. 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestSelection> 
     */
    open class func createSelectionWithRequestBuilder(body: RestSelection, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestSelection> {
        let localVariablePath = "/n/selection"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestSelection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Remove a public link
     
     - parameter linkUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestPublicLinkDeleteSuccess
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deletePublicLink(linkUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestPublicLinkDeleteSuccess {
        return try await deletePublicLinkWithRequestBuilder(linkUuid: linkUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Remove a public link
     - DELETE /n/link/{LinkUuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter linkUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestPublicLinkDeleteSuccess> 
     */
    open class func deletePublicLinkWithRequestBuilder(linkUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestPublicLinkDeleteSuccess> {
        var localVariablePath = "/n/link/{LinkUuid}"
        let linkUuidPreEscape = "\(APIHelper.mapValueToPathItem(linkUuid))"
        let linkUuidPostEscape = linkUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{LinkUuid}", with: linkUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestPublicLinkDeleteSuccess>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Load a node by its Uuid
     
     - parameter uuid: (path)  
     - parameter path: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNode
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getByUuid(uuid: String, path: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNode {
        return try await getByUuidWithRequestBuilder(uuid: uuid, path: path, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Load a node by its Uuid
     - GET /n/node/{Uuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter uuid: (path)  
     - parameter path: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNode> 
     */
    open class func getByUuidWithRequestBuilder(uuid: String, path: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNode> {
        var localVariablePath = "/n/node/{Uuid}"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Path": (wrappedValue: path?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNode>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Load public link information by Uuid
     
     - parameter linkUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestShareLink
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPublicLink(linkUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestShareLink {
        return try await getPublicLinkWithRequestBuilder(linkUuid: linkUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Load public link information by Uuid
     - GET /n/link/{LinkUuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter linkUuid: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestShareLink> 
     */
    open class func getPublicLinkWithRequestBuilder(linkUuid: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestShareLink> {
        var localVariablePath = "/n/link/{LinkUuid}"
        let linkUuidPreEscape = "\(APIHelper.mapValueToPathItem(linkUuid))"
        let linkUuidPostEscape = linkUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{LinkUuid}", with: linkUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestShareLink>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter operationOperation
     */
    public enum OperationOperation_listNamespaceValues: String, Sendable, CaseIterable {
        case put = "PUT"
        case delete = "DELETE"
    }

    /**
     List values for a given namespace
     
     - parameter namespace: (path) List persisted values for this namespace 
     - parameter operationOperation: (query)  
     - parameter operationValues: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNamespaceValuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listNamespaceValues(namespace: String, operationOperation: OperationOperation_listNamespaceValues, operationValues: [String], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNamespaceValuesResponse {
        return try await listNamespaceValuesWithRequestBuilder(namespace: namespace, operationOperation: operationOperation, operationValues: operationValues, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List values for a given namespace
     - GET /n/meta/namespace/{Namespace}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter namespace: (path) List persisted values for this namespace 
     - parameter operationOperation: (query)  
     - parameter operationValues: (query)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNamespaceValuesResponse> 
     */
    open class func listNamespaceValuesWithRequestBuilder(namespace: String, operationOperation: OperationOperation_listNamespaceValues, operationValues: [String], apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNamespaceValuesResponse> {
        var localVariablePath = "/n/meta/namespace/{Namespace}"
        let namespacePreEscape = "\(APIHelper.mapValueToPathItem(namespace))"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Operation.Operation": (wrappedValue: operationOperation.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
            "Operation.Values": (wrappedValue: operationValues.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNamespaceValuesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List defined meta namespaces
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestUserMetaNamespaceCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listNamespaces(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestUserMetaNamespaceCollection {
        return try await listNamespacesWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List defined meta namespaces
     - GET /n/meta/namespace
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestUserMetaNamespaceCollection> 
     */
    open class func listNamespacesWithRequestBuilder(apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestUserMetaNamespaceCollection> {
        let localVariablePath = "/n/meta/namespace"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestUserMetaNamespaceCollection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List all known versions of a node
     
     - parameter uuid: (path)  
     - parameter path: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNodeCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listVersions(uuid: String, path: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNodeCollection {
        return try await listVersionsWithRequestBuilder(uuid: uuid, path: path, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List all known versions of a node
     - GET /n/node/{Uuid}/versions
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter uuid: (path)  
     - parameter path: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNodeCollection> 
     */
    open class func listVersionsWithRequestBuilder(uuid: String, path: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNodeCollection> {
        var localVariablePath = "/n/node/{Uuid}/versions"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Path": (wrappedValue: path?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNodeCollection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Generic request to either list (using Locators) or search (using Query) for nodes
     
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNodeCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func lookup(body: RestLookupRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNodeCollection {
        return try await lookupWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Generic request to either list (using Locators) or search (using Query) for nodes
     - POST /n/nodes
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNodeCollection> 
     */
    open class func lookupWithRequestBuilder(body: RestLookupRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNodeCollection> {
        let localVariablePath = "/n/nodes"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNodeCollection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     PatchNode is used to update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     
     - parameter uuid: (path)  
     - parameter nodeUpdates: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNode
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func patchNode(uuid: String, nodeUpdates: RestNodeUpdates, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNode {
        return try await patchNodeWithRequestBuilder(uuid: uuid, nodeUpdates: nodeUpdates, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     PatchNode is used to update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
     - PATCH /n/node/{Uuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter uuid: (path)  
     - parameter nodeUpdates: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNode> 
     */
    open class func patchNodeWithRequestBuilder(uuid: String, nodeUpdates: RestNodeUpdates, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNode> {
        var localVariablePath = "/n/node/{Uuid}"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nodeUpdates, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNode>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter name
     */
    public enum Name_performAction: String, Sendable, CaseIterable {
        case delete = "delete"
        case restore = "restore"
        case copy = "copy"
        case move = "move"
        case extract = "extract"
        case compress = "compress"
    }

    /**
     Trigger an action on the tree. Returns a JobInfo describing a background task.
     
     - parameter name: (path)  
     - parameter parameters: (body)  
     - parameter jobUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestPerformActionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func performAction(name: Name_performAction, parameters: RestActionParameters, jobUuid: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestPerformActionResponse {
        return try await performActionWithRequestBuilder(name: name, parameters: parameters, jobUuid: jobUuid, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Trigger an action on the tree. Returns a JobInfo describing a background task.
     - POST /n/action/{Name}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter name: (path)  
     - parameter parameters: (body)  
     - parameter jobUuid: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestPerformActionResponse> 
     */
    open class func performActionWithRequestBuilder(name: Name_performAction, parameters: RestActionParameters, jobUuid: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestPerformActionResponse> {
        var localVariablePath = "/n/action/{Name}"
        let namePreEscape = "\(name.rawValue)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: parameters, codableHelper: apiConfiguration.codableHelper)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "JobUuid": (wrappedValue: jobUuid?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestPerformActionResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Search a list of meta by node Id or by User id and by namespace
     
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestUserMetaList
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchMeta(body: IdmSearchUserMetaRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestUserMetaList {
        return try await searchMetaWithRequestBuilder(body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Search a list of meta by node Id or by User id and by namespace
     - POST /n/meta/find
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter body: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestUserMetaList> 
     */
    open class func searchMetaWithRequestBuilder(body: IdmSearchUserMetaRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestUserMetaList> {
        let localVariablePath = "/n/meta/find"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestUserMetaList>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     List available templates for hydrating empty files
     
     - parameter templateType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestListTemplatesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func templates(templateType: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestListTemplatesResponse {
        return try await templatesWithRequestBuilder(templateType: templateType, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     List available templates for hydrating empty files
     - GET /n/templates
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter templateType: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestListTemplatesResponse> 
     */
    open class func templatesWithRequestBuilder(templateType: String? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestListTemplatesResponse> {
        let localVariablePath = "/n/templates"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "TemplateType": (wrappedValue: templateType?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestListTemplatesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Add/delete a values for a given namespace
     
     - parameter namespace: (path) List persisted values for this namespace 
     - parameter operation: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNamespaceValuesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateNamespaceValues(namespace: String, operation: RestNamespaceValuesOperation, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNamespaceValuesResponse {
        return try await updateNamespaceValuesWithRequestBuilder(namespace: namespace, operation: operation, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add/delete a values for a given namespace
     - PATCH /n/meta/namespace/{Namespace}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter namespace: (path) List persisted values for this namespace 
     - parameter operation: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNamespaceValuesResponse> 
     */
    open class func updateNamespaceValuesWithRequestBuilder(namespace: String, operation: RestNamespaceValuesOperation, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNamespaceValuesResponse> {
        var localVariablePath = "/n/meta/namespace/{Namespace}"
        let namespacePreEscape = "\(APIHelper.mapValueToPathItem(namespace))"
        let namespacePostEscape = namespacePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Namespace}", with: namespacePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: operation, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNamespaceValuesResponse>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Update public link settings
     
     - parameter linkUuid: (path)  
     - parameter publicLinkRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestShareLink
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updatePublicLink(linkUuid: String, publicLinkRequest: RestPublicLinkRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestShareLink {
        return try await updatePublicLinkWithRequestBuilder(linkUuid: linkUuid, publicLinkRequest: publicLinkRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update public link settings
     - PATCH /n/link/{LinkUuid}
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter linkUuid: (path)  
     - parameter publicLinkRequest: (body)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestShareLink> 
     */
    open class func updatePublicLinkWithRequestBuilder(linkUuid: String, publicLinkRequest: RestPublicLinkRequest, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestShareLink> {
        var localVariablePath = "/n/link/{LinkUuid}"
        let linkUuidPreEscape = "\(APIHelper.mapValueToPathItem(linkUuid))"
        let linkUuidPostEscape = linkUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{LinkUuid}", with: linkUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: publicLinkRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestShareLink>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }

    /**
     Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     
     - parameter all: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RestNodeCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userBookmarks(all: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> RestNodeCollection {
        return try await userBookmarksWithRequestBuilder(all: all, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Special API for Bookmarks, will load userMeta and the associated nodes, and return as a node list
     - GET /n/nodes/bookmarks
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Bearer
     - parameter all: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RestNodeCollection> 
     */
    open class func userBookmarksWithRequestBuilder(all: Bool? = nil, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<RestNodeCollection> {
        let localVariablePath = "/n/nodes/bookmarks"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "All": (wrappedValue: all?.encodeToJSON(codableHelper: apiConfiguration.codableHelper), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestNodeCollection>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
