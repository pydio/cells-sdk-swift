//
// RestVersion.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct RestVersion: Sendable, Codable, JSONEncodable, Hashable {

    public var contentHash: String?
    public var description: String?
    public var draft: Bool?
    public var eTag: String?
    public var isHead: Bool?
    public var mTime: String?
    public var ownerName: String?
    public var ownerUuid: String?
    public var size: String?
    public var versionId: String

    public init(contentHash: String? = nil, description: String? = nil, draft: Bool? = nil, eTag: String? = nil, isHead: Bool? = nil, mTime: String? = nil, ownerName: String? = nil, ownerUuid: String? = nil, size: String? = nil, versionId: String) {
        self.contentHash = contentHash
        self.description = description
        self.draft = draft
        self.eTag = eTag
        self.isHead = isHead
        self.mTime = mTime
        self.ownerName = ownerName
        self.ownerUuid = ownerUuid
        self.size = size
        self.versionId = versionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentHash = "ContentHash"
        case description = "Description"
        case draft = "Draft"
        case eTag = "ETag"
        case isHead = "IsHead"
        case mTime = "MTime"
        case ownerName = "OwnerName"
        case ownerUuid = "OwnerUuid"
        case size = "Size"
        case versionId = "VersionId"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentHash, forKey: .contentHash)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(draft, forKey: .draft)
        try container.encodeIfPresent(eTag, forKey: .eTag)
        try container.encodeIfPresent(isHead, forKey: .isHead)
        try container.encodeIfPresent(mTime, forKey: .mTime)
        try container.encodeIfPresent(ownerName, forKey: .ownerName)
        try container.encodeIfPresent(ownerUuid, forKey: .ownerUuid)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encode(versionId, forKey: .versionId)
    }
}

