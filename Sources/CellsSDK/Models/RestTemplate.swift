//
// RestTemplate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestTemplate: Codable, JSONEncodable, Hashable {

    public var editable: Bool?
    public var label: String?
    public var node: RestTemplateNode?
    public var policies: [ServiceResourcePolicy]?
    public var UUID: String?

    public init(editable: Bool? = nil, label: String? = nil, node: RestTemplateNode? = nil, policies: [ServiceResourcePolicy]? = nil, UUID: String? = nil) {
        self.editable = editable
        self.label = label
        self.node = node
        self.policies = policies
        self.UUID = UUID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case editable = "Editable"
        case label = "Label"
        case node = "Node"
        case policies = "Policies"
        case UUID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(editable, forKey: .editable)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(node, forKey: .node)
        try container.encodeIfPresent(policies, forKey: .policies)
        try container.encodeIfPresent(UUID, forKey: .UUID)
    }

    public static func == (lhs: RestTemplate, rhs: RestTemplate) -> Bool {
        lhs.editable == rhs.editable &&
        lhs.label == rhs.label &&
        lhs.node == rhs.node &&
        lhs.policies == rhs.policies &&
        lhs.UUID == rhs.UUID
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(editable?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(node?.hashValue)
        hasher.combine(policies?.hashValue)
        hasher.combine(UUID?.hashValue)
        
    }
}

