//
// RestPublicLinkRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestPublicLinkRequest: Codable, JSONEncodable, Hashable {

    public var createPassword: String?
    public var link: RestShareLink
    public var passwordEnabled: Bool?
    public var updateCustomHash: String?
    public var updatePassword: String?

    public init(createPassword: String? = nil, link: RestShareLink, passwordEnabled: Bool? = nil, updateCustomHash: String? = nil, updatePassword: String? = nil) {
        self.createPassword = createPassword
        self.link = link
        self.passwordEnabled = passwordEnabled
        self.updateCustomHash = updateCustomHash
        self.updatePassword = updatePassword
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createPassword = "CreatePassword"
        case link = "Link"
        case passwordEnabled = "PasswordEnabled"
        case updateCustomHash = "UpdateCustomHash"
        case updatePassword = "UpdatePassword"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createPassword, forKey: .createPassword)
        try container.encode(link, forKey: .link)
        try container.encodeIfPresent(passwordEnabled, forKey: .passwordEnabled)
        try container.encodeIfPresent(updateCustomHash, forKey: .updateCustomHash)
        try container.encodeIfPresent(updatePassword, forKey: .updatePassword)
    }

    public static func == (lhs: RestPublicLinkRequest, rhs: RestPublicLinkRequest) -> Bool {
        lhs.createPassword == rhs.createPassword &&
        lhs.link == rhs.link &&
        lhs.passwordEnabled == rhs.passwordEnabled &&
        lhs.updateCustomHash == rhs.updateCustomHash &&
        lhs.updatePassword == rhs.updatePassword
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createPassword?.hashValue)
        hasher.combine(link.hashValue)
        hasher.combine(passwordEnabled?.hashValue)
        hasher.combine(updateCustomHash?.hashValue)
        hasher.combine(updatePassword?.hashValue)
        
    }
}

