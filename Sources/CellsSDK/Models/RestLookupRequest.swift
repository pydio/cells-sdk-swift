//
// RestLookupRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestLookupRequest: Codable, JSONEncodable, Hashable {

    public var limit: String?
    public var locators: RestNodeLocators?
    public var offset: String?
    public var query: TreeQuery?
    public var sortDirDesc: Bool?
    public var sortField: String?
    public var statFlags: [Int64]?

    public init(limit: String? = nil, locators: RestNodeLocators? = nil, offset: String? = nil, query: TreeQuery? = nil, sortDirDesc: Bool? = nil, sortField: String? = nil, statFlags: [Int64]? = nil) {
        self.limit = limit
        self.locators = locators
        self.offset = offset
        self.query = query
        self.sortDirDesc = sortDirDesc
        self.sortField = sortField
        self.statFlags = statFlags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case limit = "Limit"
        case locators = "Locators"
        case offset = "Offset"
        case query = "Query"
        case sortDirDesc = "SortDirDesc"
        case sortField = "SortField"
        case statFlags = "StatFlags"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(locators, forKey: .locators)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(query, forKey: .query)
        try container.encodeIfPresent(sortDirDesc, forKey: .sortDirDesc)
        try container.encodeIfPresent(sortField, forKey: .sortField)
        try container.encodeIfPresent(statFlags, forKey: .statFlags)
    }

    public static func == (lhs: RestLookupRequest, rhs: RestLookupRequest) -> Bool {
        lhs.limit == rhs.limit &&
        lhs.locators == rhs.locators &&
        lhs.offset == rhs.offset &&
        lhs.query == rhs.query &&
        lhs.sortDirDesc == rhs.sortDirDesc &&
        lhs.sortField == rhs.sortField &&
        lhs.statFlags == rhs.statFlags
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(limit?.hashValue)
        hasher.combine(locators?.hashValue)
        hasher.combine(offset?.hashValue)
        hasher.combine(query?.hashValue)
        hasher.combine(sortDirDesc?.hashValue)
        hasher.combine(sortField?.hashValue)
        hasher.combine(statFlags?.hashValue)
        
    }
}

