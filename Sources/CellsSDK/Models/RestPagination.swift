//
// RestPagination.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct RestPagination: Sendable, Codable, JSONEncodable, Hashable {

    public var currentOffset: Int?
    public var currentPage: Int?
    public var limit: Int?
    public var nextOffset: Int?
    public var prevOffset: Int?
    public var total: Int?
    public var totalPages: Int?

    public init(currentOffset: Int? = nil, currentPage: Int? = nil, limit: Int? = nil, nextOffset: Int? = nil, prevOffset: Int? = nil, total: Int? = nil, totalPages: Int? = nil) {
        self.currentOffset = currentOffset
        self.currentPage = currentPage
        self.limit = limit
        self.nextOffset = nextOffset
        self.prevOffset = prevOffset
        self.total = total
        self.totalPages = totalPages
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentOffset = "CurrentOffset"
        case currentPage = "CurrentPage"
        case limit = "Limit"
        case nextOffset = "NextOffset"
        case prevOffset = "PrevOffset"
        case total = "Total"
        case totalPages = "TotalPages"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(currentOffset, forKey: .currentOffset)
        try container.encodeIfPresent(currentPage, forKey: .currentPage)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(nextOffset, forKey: .nextOffset)
        try container.encodeIfPresent(prevOffset, forKey: .prevOffset)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(totalPages, forKey: .totalPages)
    }
}

