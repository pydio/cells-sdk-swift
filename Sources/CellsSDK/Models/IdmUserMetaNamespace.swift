//
// IdmUserMetaNamespace.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct IdmUserMetaNamespace: Sendable, Codable, JSONEncodable, Hashable {

    public var indexable: Bool?
    public var jsonDefinition: String?
    public var label: String?
    public var namespace: String?
    public var order: Int?
    public var policies: [ServiceResourcePolicy]?
    public var policiesContextEditable: Bool?

    public init(indexable: Bool? = nil, jsonDefinition: String? = nil, label: String? = nil, namespace: String? = nil, order: Int? = nil, policies: [ServiceResourcePolicy]? = nil, policiesContextEditable: Bool? = nil) {
        self.indexable = indexable
        self.jsonDefinition = jsonDefinition
        self.label = label
        self.namespace = namespace
        self.order = order
        self.policies = policies
        self.policiesContextEditable = policiesContextEditable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case indexable = "Indexable"
        case jsonDefinition = "JsonDefinition"
        case label = "Label"
        case namespace = "Namespace"
        case order = "Order"
        case policies = "Policies"
        case policiesContextEditable = "PoliciesContextEditable"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(indexable, forKey: .indexable)
        try container.encodeIfPresent(jsonDefinition, forKey: .jsonDefinition)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(policies, forKey: .policies)
        try container.encodeIfPresent(policiesContextEditable, forKey: .policiesContextEditable)
    }
}

