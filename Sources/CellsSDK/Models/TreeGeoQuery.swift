//
// TreeGeoQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class TreeGeoQuery: Codable, JSONEncodable, Hashable {

    public var bottomRight: TreeGeoPoint?
    public var center: TreeGeoPoint?
    /** Example formats supported: \"5in\" \"5inch\" \"7yd\" \"7yards\" \"9ft\" \"9feet\" \"11km\" \"11kilometers\" \"3nm\" \"3nauticalmiles\" \"13mm\" \"13millimeters\" \"15cm\" \"15centimeters\" \"17mi\" \"17miles\" \"19m\" \"19meters\" If the unit cannot be determined, the entire string is parsed and the unit of meters is assumed. */
    public var distance: String?
    public var topLeft: TreeGeoPoint?

    public init(bottomRight: TreeGeoPoint? = nil, center: TreeGeoPoint? = nil, distance: String? = nil, topLeft: TreeGeoPoint? = nil) {
        self.bottomRight = bottomRight
        self.center = center
        self.distance = distance
        self.topLeft = topLeft
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bottomRight = "BottomRight"
        case center = "Center"
        case distance = "Distance"
        case topLeft = "TopLeft"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bottomRight, forKey: .bottomRight)
        try container.encodeIfPresent(center, forKey: .center)
        try container.encodeIfPresent(distance, forKey: .distance)
        try container.encodeIfPresent(topLeft, forKey: .topLeft)
    }

    public static func == (lhs: TreeGeoQuery, rhs: TreeGeoQuery) -> Bool {
        lhs.bottomRight == rhs.bottomRight &&
        lhs.center == rhs.center &&
        lhs.distance == rhs.distance &&
        lhs.topLeft == rhs.topLeft
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bottomRight?.hashValue)
        hasher.combine(center?.hashValue)
        hasher.combine(distance?.hashValue)
        hasher.combine(topLeft?.hashValue)
        
    }
}

