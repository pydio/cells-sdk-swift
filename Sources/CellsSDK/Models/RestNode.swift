//
// RestNode.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Representation of a file or folder */
public struct RestNode: Sendable, Codable, JSONEncodable, Hashable {

    public var activities: [ActivityObject]?
    public var contentHash: String?
    public var contentLock: RestLockInfo?
    public var contentType: String?
    public var contextWorkspace: RestContextWorkspace?
    public var dataSourceFeatures: RestDataSourceFeatures?
    public var folderMeta: [RestCountMeta]?
    public var hashingMethod: String?
    public var imageMeta: RestImageMeta?
    public var isBookmarked: Bool?
    public var isDraft: Bool?
    public var isRecycleBin: Bool?
    public var isRecycled: Bool?
    public var metadata: [RestJsonMeta]?
    public var mode: RestMode?
    /** Date instead of TS ? */
    public var modified: String?
    public var path: String
    public var previews: [RestFilePreview]?
    public var shares: [RestShareLink]?
    public var size: String?
    public var storageETag: String?
    public var subscriptions: [ActivitySubscription]?
    public var type: TreeNodeType?
    public var userMetadata: [RestUserMeta]?
    public var uuid: String
    public var versionMeta: RestVersionMeta?

    public init(activities: [ActivityObject]? = nil, contentHash: String? = nil, contentLock: RestLockInfo? = nil, contentType: String? = nil, contextWorkspace: RestContextWorkspace? = nil, dataSourceFeatures: RestDataSourceFeatures? = nil, folderMeta: [RestCountMeta]? = nil, hashingMethod: String? = nil, imageMeta: RestImageMeta? = nil, isBookmarked: Bool? = nil, isDraft: Bool? = nil, isRecycleBin: Bool? = nil, isRecycled: Bool? = nil, metadata: [RestJsonMeta]? = nil, mode: RestMode? = nil, modified: String? = nil, path: String, previews: [RestFilePreview]? = nil, shares: [RestShareLink]? = nil, size: String? = nil, storageETag: String? = nil, subscriptions: [ActivitySubscription]? = nil, type: TreeNodeType? = nil, userMetadata: [RestUserMeta]? = nil, uuid: String, versionMeta: RestVersionMeta? = nil) {
        self.activities = activities
        self.contentHash = contentHash
        self.contentLock = contentLock
        self.contentType = contentType
        self.contextWorkspace = contextWorkspace
        self.dataSourceFeatures = dataSourceFeatures
        self.folderMeta = folderMeta
        self.hashingMethod = hashingMethod
        self.imageMeta = imageMeta
        self.isBookmarked = isBookmarked
        self.isDraft = isDraft
        self.isRecycleBin = isRecycleBin
        self.isRecycled = isRecycled
        self.metadata = metadata
        self.mode = mode
        self.modified = modified
        self.path = path
        self.previews = previews
        self.shares = shares
        self.size = size
        self.storageETag = storageETag
        self.subscriptions = subscriptions
        self.type = type
        self.userMetadata = userMetadata
        self.uuid = uuid
        self.versionMeta = versionMeta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activities = "Activities"
        case contentHash = "ContentHash"
        case contentLock = "ContentLock"
        case contentType = "ContentType"
        case contextWorkspace = "ContextWorkspace"
        case dataSourceFeatures = "DataSourceFeatures"
        case folderMeta = "FolderMeta"
        case hashingMethod = "HashingMethod"
        case imageMeta = "ImageMeta"
        case isBookmarked = "IsBookmarked"
        case isDraft = "IsDraft"
        case isRecycleBin = "IsRecycleBin"
        case isRecycled = "IsRecycled"
        case metadata = "Metadata"
        case mode = "Mode"
        case modified = "Modified"
        case path = "Path"
        case previews = "Previews"
        case shares = "Shares"
        case size = "Size"
        case storageETag = "StorageETag"
        case subscriptions = "Subscriptions"
        case type = "Type"
        case userMetadata = "UserMetadata"
        case uuid = "Uuid"
        case versionMeta = "VersionMeta"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activities, forKey: .activities)
        try container.encodeIfPresent(contentHash, forKey: .contentHash)
        try container.encodeIfPresent(contentLock, forKey: .contentLock)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(contextWorkspace, forKey: .contextWorkspace)
        try container.encodeIfPresent(dataSourceFeatures, forKey: .dataSourceFeatures)
        try container.encodeIfPresent(folderMeta, forKey: .folderMeta)
        try container.encodeIfPresent(hashingMethod, forKey: .hashingMethod)
        try container.encodeIfPresent(imageMeta, forKey: .imageMeta)
        try container.encodeIfPresent(isBookmarked, forKey: .isBookmarked)
        try container.encodeIfPresent(isDraft, forKey: .isDraft)
        try container.encodeIfPresent(isRecycleBin, forKey: .isRecycleBin)
        try container.encodeIfPresent(isRecycled, forKey: .isRecycled)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(modified, forKey: .modified)
        try container.encode(path, forKey: .path)
        try container.encodeIfPresent(previews, forKey: .previews)
        try container.encodeIfPresent(shares, forKey: .shares)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(storageETag, forKey: .storageETag)
        try container.encodeIfPresent(subscriptions, forKey: .subscriptions)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(userMetadata, forKey: .userMetadata)
        try container.encode(uuid, forKey: .uuid)
        try container.encodeIfPresent(versionMeta, forKey: .versionMeta)
    }
}

