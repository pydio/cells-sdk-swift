//
// TreeNodeChangeEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct TreeNodeChangeEvent: Sendable, Codable, JSONEncodable, Hashable {

    public var metadata: [String: String]?
    public var optimistic: Bool?
    public var silent: Bool?
    public var source: TreeNode?
    public var target: TreeNode?
    public var type: TreeNodeChangeEventEventType?

    public init(metadata: [String: String]? = nil, optimistic: Bool? = nil, silent: Bool? = nil, source: TreeNode? = nil, target: TreeNode? = nil, type: TreeNodeChangeEventEventType? = nil) {
        self.metadata = metadata
        self.optimistic = optimistic
        self.silent = silent
        self.source = source
        self.target = target
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case metadata = "Metadata"
        case optimistic = "Optimistic"
        case silent = "Silent"
        case source = "Source"
        case target = "Target"
        case type = "Type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(optimistic, forKey: .optimistic)
        try container.encodeIfPresent(silent, forKey: .silent)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(target, forKey: .target)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

