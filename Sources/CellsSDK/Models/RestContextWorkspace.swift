//
// RestContextWorkspace.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Current workspace information, maybe published on the root node of a workspace */
public struct RestContextWorkspace: Sendable, Codable, JSONEncodable, Hashable {

    public var description: String?
    public var isRoot: Bool?
    public var isVirtualRoot: Bool?
    public var label: String?
    public var permissions: String?
    public var quota: String?
    public var quotaUsage: String?
    public var scope: IdmWorkspaceScope?
    public var skipRecycle: Bool?
    public var slug: String
    public var syncable: Bool?
    public var uuid: String

    public init(description: String? = nil, isRoot: Bool? = nil, isVirtualRoot: Bool? = nil, label: String? = nil, permissions: String? = nil, quota: String? = nil, quotaUsage: String? = nil, scope: IdmWorkspaceScope? = nil, skipRecycle: Bool? = nil, slug: String, syncable: Bool? = nil, uuid: String) {
        self.description = description
        self.isRoot = isRoot
        self.isVirtualRoot = isVirtualRoot
        self.label = label
        self.permissions = permissions
        self.quota = quota
        self.quotaUsage = quotaUsage
        self.scope = scope
        self.skipRecycle = skipRecycle
        self.slug = slug
        self.syncable = syncable
        self.uuid = uuid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description = "Description"
        case isRoot = "IsRoot"
        case isVirtualRoot = "IsVirtualRoot"
        case label = "Label"
        case permissions = "Permissions"
        case quota = "Quota"
        case quotaUsage = "QuotaUsage"
        case scope = "Scope"
        case skipRecycle = "SkipRecycle"
        case slug = "Slug"
        case syncable = "Syncable"
        case uuid = "Uuid"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isRoot, forKey: .isRoot)
        try container.encodeIfPresent(isVirtualRoot, forKey: .isVirtualRoot)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(quota, forKey: .quota)
        try container.encodeIfPresent(quotaUsage, forKey: .quotaUsage)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(skipRecycle, forKey: .skipRecycle)
        try container.encode(slug, forKey: .slug)
        try container.encodeIfPresent(syncable, forKey: .syncable)
        try container.encode(uuid, forKey: .uuid)
    }
}

