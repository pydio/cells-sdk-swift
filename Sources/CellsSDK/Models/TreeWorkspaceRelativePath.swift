//
// TreeWorkspaceRelativePath.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class TreeWorkspaceRelativePath: Codable, JSONEncodable, Hashable {

    public var path: String?
    public var wsLabel: String?
    public var wsScope: String?
    public var wsSlug: String?
    public var wsUuid: String?

    public init(path: String? = nil, wsLabel: String? = nil, wsScope: String? = nil, wsSlug: String? = nil, wsUuid: String? = nil) {
        self.path = path
        self.wsLabel = wsLabel
        self.wsScope = wsScope
        self.wsSlug = wsSlug
        self.wsUuid = wsUuid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case path = "Path"
        case wsLabel = "WsLabel"
        case wsScope = "WsScope"
        case wsSlug = "WsSlug"
        case wsUuid = "WsUuid"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(wsLabel, forKey: .wsLabel)
        try container.encodeIfPresent(wsScope, forKey: .wsScope)
        try container.encodeIfPresent(wsSlug, forKey: .wsSlug)
        try container.encodeIfPresent(wsUuid, forKey: .wsUuid)
    }

    public static func == (lhs: TreeWorkspaceRelativePath, rhs: TreeWorkspaceRelativePath) -> Bool {
        lhs.path == rhs.path &&
        lhs.wsLabel == rhs.wsLabel &&
        lhs.wsScope == rhs.wsScope &&
        lhs.wsSlug == rhs.wsSlug &&
        lhs.wsUuid == rhs.wsUuid
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path?.hashValue)
        hasher.combine(wsLabel?.hashValue)
        hasher.combine(wsScope?.hashValue)
        hasher.combine(wsSlug?.hashValue)
        hasher.combine(wsUuid?.hashValue)
        
    }
}

