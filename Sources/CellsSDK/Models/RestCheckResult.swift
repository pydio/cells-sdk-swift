//
// RestCheckResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public final class RestCheckResult: Codable, JSONEncodable, Hashable {

    public var exists: Bool?
    public var inputLocator: RestNodeLocator?
    public var nextPath: String?
    public var node: RestNode?

    public init(exists: Bool? = nil, inputLocator: RestNodeLocator? = nil, nextPath: String? = nil, node: RestNode? = nil) {
        self.exists = exists
        self.inputLocator = inputLocator
        self.nextPath = nextPath
        self.node = node
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case exists = "Exists"
        case inputLocator = "InputLocator"
        case nextPath = "NextPath"
        case node = "Node"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(exists, forKey: .exists)
        try container.encodeIfPresent(inputLocator, forKey: .inputLocator)
        try container.encodeIfPresent(nextPath, forKey: .nextPath)
        try container.encodeIfPresent(node, forKey: .node)
    }

    public static func == (lhs: RestCheckResult, rhs: RestCheckResult) -> Bool {
        lhs.exists == rhs.exists &&
        lhs.inputLocator == rhs.inputLocator &&
        lhs.nextPath == rhs.nextPath &&
        lhs.node == rhs.node
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(exists?.hashValue)
        hasher.combine(inputLocator?.hashValue)
        hasher.combine(nextPath?.hashValue)
        hasher.combine(node?.hashValue)
        
    }
}

